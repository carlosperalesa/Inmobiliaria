Log generado el 2024-05-20 16:39:09


******************************inmobiliaria/settings.py******************************

"""
Django settings for inmobiliaria project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vz%-$(n14bgro71!cq$jvw8)bi8k1al(deci_c9=9@9x(-+^+l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'arriendos',
    'widget_tweaks',
    'crispy_forms',
    'crispy_bootstrap5',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'inmobiliaria.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'inmobiliaria.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'inmobiliaria',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'es-cl'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'arriendos/templates/static')]

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = 'index'
LOGOUT_REDIRECT_URL = '/'
LOGIN_URL = 'login'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Custom user model
AUTH_USER_MODEL = 'arriendos.Usuario'

******************************inmobiliaria/urls.py******************************

from django.conf import settings
from django.conf.urls.static import static
from django.contrib import admin
from django.urls import path
from arriendos.views import *

urlpatterns = [
    path('admin/', admin.site.urls),
    # index
    path('', index, name='index'),
    path('footer/', footer, name='footer'),
    path('header/', header, name='header'),
    path('welcome/', welcome, name='welcome'),
    path('contacto/', contacto, name='contacto'),

    # Manejo de inmuebles
    path('crear_inmuebles/', crear_inmuebles, name='crear_inmuebles'),
    path('ver_inmuebles/', ver_inmuebles, name='ver_inmuebles'),
    path('editar_inmuebles/<int:inmuebles_id>/',
         editar_inmuebles, name='editar_inmuebles'),
    path('ver_propiedad/<int:inmuebles_id>/',
         ver_propiedad, name='ver_propiedad'),
    path('eliminar_inmueble/<int:inmuebles_id>/',
         eliminar_inmuebles, name='eliminar_inmuebles'),
    # Manejo de usuarios
    path('login/', login, name='login'),
    path('register/', register, name='register'),
    path('edit/', edit_profile, name='edit_profile'),
    path('eliminar_usuario/', eliminar_usuario, name='eliminar_usuario'),
    path('logout/', salir, name='logout'),
    # Otras rutas
    path('ajax/comunas/<int:region_id>/',
         comunas_por_region, name='comunas_por_region'),

]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL,
                          document_root=settings.MEDIA_ROOT)

******************************arriendos/views.py******************************

from .forms import ContactForm, RegistroUsuarioForm, EditProfileForm, InmuebleForm
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.hashers import make_password
from django.contrib.auth import logout, authenticate, login as auth_login
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .models import Comuna, Region, Inmueble
from django.http import JsonResponse, HttpResponseRedirect, HttpResponse
from django.urls import reverse_lazy
from django.http import Http404

# Create your views here.


def index(request):
    return render(request, 'welcome.html')


def welcome(request):
    return render(request, 'welcome.html')


def footer(request):
    return render(request, 'footer.html')


def header(request):
    return render(request, 'header.html')


def register(request):
    if request.method == 'POST':
        form = RegistroUsuarioForm(request.POST)
        if form.is_valid():
            user = form.save(commit=False)
            password = form.cleaned_data['password']
            user.password = make_password(password)
            user.save()
            messages.success(
                request, 'Tu registro se ha completado con éxito. ¡Bienvenido a la comunidad!')
            return redirect('login')
        else:
            messages.error(
                request, 'Hubo un problema con tu registro. Por favor, intenta de nuevo.')
    else:
        form = RegistroUsuarioForm()
    return render(request, 'registration/register.html', {'form': form})


def login(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            if user is not None:
                auth_login(request, user)
                return redirect('index')
            else:
                messages.error(
                    request, 'Credenciales inválidas. Por favor, intenta de nuevo.')
    else:
        form = AuthenticationForm()
    return render(request, 'registration/login.html', {'form': form})


@login_required
def edit_profile(request):
    if request.method == 'POST':
        form = EditProfileForm(request.POST, instance=request.user)
        if form.is_valid():
            user = form.save(commit=False)
            password = form.cleaned_data.get('password')
            if password:
                user.set_password(password)
            user.save()

            # Verificar si se solicitó eliminar el perfil
            if "eliminar_perfil" in request.POST:
                # Eliminar el perfil
                request.user.delete()
                # Desconectar al usuario
                logout(request)
                # Redirigir a la página de inicio
                return HttpResponseRedirect(reverse_lazy("index"))
            else:
                messages.success(request, 'Perfil actualizado correctamente.')
                return redirect('edit_profile')
        else:
            messages.error(
                request, 'Hubo un problema al actualizar el perfil.')
    else:
        form = EditProfileForm(instance=request.user)
    return render(request, 'registration/edit.html', {'form': form})


@login_required
def eliminar_usuario(request):
    if request.method == 'POST':
        request.user.delete()
        messages.success(request, 'Tu perfil ha sido eliminado correctamente.')
        return redirect('index')
    else:
        return HttpResponse("Error: Método no permitido", status=405)


@login_required
def salir(request):
    logout(request)
    return redirect('index')


def comunas_por_region(request, region_id):
    comunas = Comuna.objects.filter(region_id=region_id).values('id', 'nombre')
    return JsonResponse(list(comunas), safe=False)


@login_required
def crear_inmuebles(request):
    if request.method == 'POST':
        form = InmuebleForm(request.POST, request.FILES)
        if form.is_valid():
            inmueble = form.save(commit=False)
            inmueble.propietario = request.user
            inmueble.save()
            messages.success(request, 'Inmueble creado con éxito.')
            return redirect('ver_inmuebles')
    else:
        form = InmuebleForm()
    return render(request, 'inmuebles/crear_inmuebles.html', {'form': form})


@login_required
def ver_inmuebles(request):
    inmuebles = Inmueble.objects.all()
    regiones = Region.objects.all()
    comunas = Comuna.objects.all()

    region_id = request.GET.get('region')
    comuna_id = request.GET.get('comuna')

    if region_id:
        inmuebles = inmuebles.filter(region_id=region_id)
    if comuna_id:
        inmuebles = inmuebles.filter(comuna_id=comuna_id)

    return render(request, 'inmuebles/ver_inmuebles.html', {
        'regiones': regiones,
        'comunas': comunas,
        'inmuebles': inmuebles
    })


@login_required
def ver_propiedad(request, inmuebles_id):
    try:
        inmueble = get_object_or_404(Inmueble, id=inmuebles_id)
        return render(request, 'inmuebles/ver_propiedad.html', {'inmueble': inmueble})
    except Http404:
        return render(request, 'errors/404.html', status=404)


@login_required
def editar_inmuebles(request, inmuebles_id):
    inmueble = get_object_or_404(Inmueble, id=inmuebles_id)
    if request.user.tipo_usuario != 'arrendador' or request.user != inmueble.propietario:
        return redirect('ver_inmuebles')

    if request.method == 'POST':
        form = InmuebleForm(request.POST, request.FILES,
                            instance=inmueble)
        if form.is_valid():
            form.save()
            messages.success(request, 'Inmueble actualizado con éxito.')
            return redirect('ver_inmuebles')
        else:
            messages.error(
                request, 'Hubo un problema al actualizar el inmueble.')
    else:
        form = InmuebleForm(instance=inmueble)

    return render(request, 'inmuebles/editar_inmuebles.html', {'form': form, 'inmueble': inmueble})


@login_required
def eliminar_inmuebles(request, inmuebles_id):
    inmueble = get_object_or_404(Inmueble, id=inmuebles_id)
    if request.user.tipo_usuario == 'arrendador' and request.user == inmueble.propietario:
        inmueble.delete()
        messages.success(request, 'Inmueble eliminado con éxito')
    return redirect('ver_inmuebles')


def contacto(request):
    if request.method == 'POST':
        form = ContactForm(request.POST)
        if form.is_valid():
            form.save()
            form_submitted = True
        else:
            form_submitted = False
    else:
        form_submitted = False
        initial_data = {
            'name': request.GET.get('name', ''),
            'email': request.GET.get('email', ''),
            'subject': request.GET.get('subject', ''),
            'message': request.GET.get('message', ''),
        }
        form = ContactForm(initial=initial_data)

    return render(request, 'contacto.html', {'form': form, 'form_submitted': form_submitted})

******************************arriendos/models.py******************************

from django import forms
from django.conf import settings
from django.db import models
from django.db.models import Model
from django.core.validators import RegexValidator
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.core.exceptions import ValidationError


class UsuarioManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("El email debe ser proporcionado")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(email, password, **extra_fields)


def validar_formato_rut(value):
    if not value:
        raise ValidationError('El RUT no puede estar vacío.')
    # Verificar si el formato del RUT es válido (solo números y K, con 9 dígitos)
    if len(value) != 10 or value[8] not in '0123456789kK' or not value[:-2].isdigit():
        raise ValidationError(
            'El RUT debe tener el formato correcto: 12345678-9 o 12345678-K')


class Usuario(AbstractBaseUser, PermissionsMixin):
    TIPO = (
        ('arrendador', 'Arrendador'),
        ('arrendatario', 'Arrendatario'),
    )
    tipo_usuario = models.CharField(max_length=50, choices=TIPO)

    rut_validator = RegexValidator(
        regex=r'^\d{7,8}-[\dKk]$',
        message="El formato del RUT debe ser válido."
    )
    rut = models.CharField(max_length=10, validators=[rut_validator])

    primer_nombre = models.CharField(max_length=30)
    segundo_nombre = models.CharField(max_length=30, blank=True, null=True)
    primer_apellido = models.CharField(max_length=30)
    segundo_apellido = models.CharField(max_length=30, blank=True, null=True)
    direccion = models.CharField(max_length=255, blank=True, null=True)
    email = models.EmailField(unique=True)
    telefono_personal = models.CharField(max_length=9, blank=True, null=True)

    is_staff = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['primer_nombre', 'primer_apellido']

    objects = UsuarioManager()

    def normalizar_rut(self):
        rut = self.rut.replace(".", "").replace("-", "")
        rut = rut[:-1] + "-" + rut[-1].upper()
        return rut

    def save(self, *args, **kwargs):
        if self.rut:
            self.rut = self.normalizar_rut()
        super().save(*args, **kwargs)

    def __str__(self) -> str:
        return f"{self.primer_nombre} {self.segundo_nombre} {self.primer_apellido} {self.segundo_apellido}"


class Region(models.Model):
    nombre = models.CharField(max_length=100, unique=True)

    def __str__(self):
        return self.nombre


class Comuna(models.Model):
    nombre = models.CharField(max_length=100)
    region = models.ForeignKey(Region, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.nombre} - {self.region.nombre}"


class Inmueble(models.Model):
    TIPO_INMUEBLE_CHOICES = [
        ('Casa', 'Casa'),
        ('Departamento', 'Departamento'),
        ('Parcela', 'Parcela'),
    ]
    descripcion = models.TextField()
    m2_construidos = models.PositiveIntegerField()
    m2_totales = models.PositiveIntegerField()
    cantidad_estacionamientos = models.PositiveIntegerField()
    cantidad_habitaciones = models.PositiveIntegerField()
    cantidad_banos = models.PositiveIntegerField()
    direccion = models.CharField(max_length=255)
    comuna = models.ForeignKey(Comuna, on_delete=models.CASCADE)
    region = models.ForeignKey(Region, on_delete=models.CASCADE)
    tipo_inmueble = models.CharField(
        max_length=20, choices=TIPO_INMUEBLE_CHOICES)
    precio_mensual_arriendo = models.PositiveIntegerField()
    propietario = models.ForeignKey(
        settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    arrendatario = models.ForeignKey(
        settings.AUTH_USER_MODEL, related_name='arrendamientos', on_delete=models.SET_NULL, null=True, blank=True)
    imagen = models.ImageField(upload_to='img', blank=True, null=True)


class Contact(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    subject = models.CharField(max_length=100)
    message = models.TextField()

******************************arriendos/forms.py******************************

from .models import Inmueble, Region, Comuna, Contact
from django import forms
from django.contrib.auth.forms import UserChangeForm
from django.contrib.auth.models import User
from .models import Usuario, Inmueble, Region  # Importa el modelo Region
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Submit


class RegistroUsuarioForm(forms.ModelForm):
    password = forms.CharField(widget=forms.PasswordInput, label='Contraseña')
    confirm_password = forms.CharField(
        widget=forms.PasswordInput, label='Confirme su contraseña')

    class Meta:
        model = Usuario
        fields = ['tipo_usuario', 'rut', 'primer_nombre', 'segundo_nombre', 'primer_apellido',
                  'segundo_apellido', 'direccion', 'email', 'telefono_personal', 'password']

    def clean(self):
        cleaned_data = super().clean()
        password = cleaned_data.get("password")
        confirm_password = cleaned_data.get("confirm_password")

        if password != confirm_password:
            self.add_error('confirm_password', "Las contraseñas no coinciden")

        return cleaned_data


class EditProfileForm(forms.ModelForm):
    password = forms.CharField(widget=forms.PasswordInput, label='Contraseña')
    confirm_password = forms.CharField(
        widget=forms.PasswordInput, label='Confirme su contraseña')

    class Meta:
        model = Usuario
        fields = ['tipo_usuario', 'rut', 'primer_nombre', 'segundo_nombre', 'primer_apellido',
                  'segundo_apellido', 'direccion', 'email', 'telefono_personal', 'password', 'confirm_password']

    def __init__(self, *args, **kwargs):
        super(EditProfileForm, self).__init__(*args, **kwargs)
        self.fields['rut'].widget.attrs['readonly'] = True
        self.fields['rut'].widget.attrs['class'] = 'form-control-plaintext'
        self.fields['primer_nombre'].widget.attrs['readonly'] = True
        self.fields['primer_nombre'].widget.attrs['class'] = 'form-control-plaintext'
        self.fields['primer_apellido'].widget.attrs['readonly'] = True
        self.fields['primer_apellido'].widget.attrs['class'] = 'form-control-plaintext'
        self.fields['email'].widget.attrs['readonly'] = True
        self.fields['email'].widget.attrs['class'] = 'form-control-plaintext'


class InmuebleForm(forms.ModelForm):
    region = forms.ModelChoiceField(
        queryset=Region.objects.all(), empty_label=None, label='Región')
    comuna = forms.ModelChoiceField(
        queryset=Comuna.objects.none(), label='Comuna')

    class Meta:
        model = Inmueble
        fields = [
            'descripcion', 'm2_construidos', 'm2_totales',
            'cantidad_estacionamientos', 'cantidad_habitaciones', 'cantidad_banos',
            'direccion', 'region', 'comuna', 'tipo_inmueble', 'precio_mensual_arriendo',
            'imagen'
        ]

    def __init__(self, *args, **kwargs):
        super(InmuebleForm, self).__init__(*args, **kwargs)
        self.fields['comuna'].queryset = Comuna.objects.none()

        if 'region' in self.data:
            try:
                region_id = int(self.data.get('region'))
                self.fields['comuna'].queryset = Comuna.objects.filter(
                    region_id=region_id).order_by('nombre')
            except (ValueError, TypeError):
                pass
        elif self.instance.pk:
            self.fields['comuna'].queryset = self.instance.region.comuna_set.order_by(
                'nombre')


class ContactForm(forms.ModelForm):
    class Meta:
        model = Contact
        fields = ['name', 'email', 'subject', 'message']
        labels = {
            'name': 'Nombre',
            'email': 'Correo',
            'subject': 'Motivo',
            'message': 'Mensaje',
        }

******************************arriendos/apps.py******************************

from django.apps import AppConfig


class ArriendosConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'arriendos'

******************************arriendos/admin.py******************************

from django.contrib import admin
from arriendos.models import Usuario, Inmueble, Contact

# Register your models here.

admin.site.register(Usuario)
admin.site.register(Inmueble)
admin.site.register(Contact)
